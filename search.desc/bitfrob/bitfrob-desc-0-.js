searchState.loadedDescShard("bitfrob", 0, "A crate to help with bit manipulation of integers.\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nIterator for groups of bits in an integer (low to high).\nWhen used as a multiplier, scales a “1 bit” <code>u8</code> to …\nWhen used as a multiplier, scales a “2 bit” <code>u8</code> to …\nWhen used as a multiplier, scales a “4 bit” <code>u8</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nConstructs a new iterator for <code>bits_per_iter</code> at a time out …\nThe upper byte\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe lower byte\nDetermines if the <code>b</code> bit is set in <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.\nGenerates a bit mask where all bits in the region are 1.\nReplicates the lowest <code>count</code> bits across the entire value.\nReplaces the <code>b</code> bit in <code>u</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …\nDetermines if the <code>b</code> bit is set in <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.\nGenerates a bit mask where all bits in the region are 1.\nReplicates the lowest <code>count</code> bits across the entire value.\nReplaces the <code>b</code> bit in <code>u</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …\nDetermines if the <code>b</code> bit is set in <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.\nGenerates a bit mask where all bits in the region are 1.\nReplicates the lowest <code>count</code> bits across the entire value.\nReplaces the <code>b</code> bit in <code>u</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …\nDetermines if the <code>b</code> bit is set in <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.\nGenerates a bit mask where all bits in the region are 1.\nReplicates the lowest <code>count</code> bits across the entire value.\nReplaces the <code>b</code> bit in <code>u</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …\nSplits a byte into 1-bit chunks.\nSplits a byte into 1-bit chunks (reversed).\nSplits a byte into 2-bit chunks.\nSplits a byte into 2-bit chunks (reversed).\nSplits a byte into 4-bit chunks.\nSplits a byte into 4-bit chunks (reversed).\nDetermines if the <code>b</code> bit is set in <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>.\nGet the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.\nGenerates a bit mask where all bits in the region are 1.\nReplicates the lowest <code>count</code> bits across the entire value.\nReplaces the <code>b</code> bit in <code>u</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.\nReplaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …\nTwo <code>u8</code> values packed as a <code>u16</code>.\nUpdates the upper byte value, returning the new <code>u8x2</code>\nUpdates the lower byte value, returning the new <code>u8x2</code>")