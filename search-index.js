var searchIndex = JSON.parse('{\
"bitfrob":{"doc":"A crate to help with bit manipulation of integers.","t":[18,18,18,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11],"n":["OUT","OUT","OUT","U16ConstRegionMask","U32ConstRegionMask","U8ConstRegionMask","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","default","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","high","into","into","into","into","low","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u16_get_bit","u16_get_region","u16_get_value","u16_region_mask","u16_with_bit","u16_with_region","u16_with_value","u32_get_bit","u32_get_region","u32_get_value","u32_region_mask","u32_with_bit","u32_with_region","u32_with_value","u8_get_bit","u8_get_region","u8_get_value","u8_region_mask","u8_with_bit","u8_with_region","u8_with_value","u8x2","with_high","with_low"],"q":["bitfrob","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The computed bit mask.","The computed bit mask.","The computed bit mask.","Like <code>u16_region_mask</code>, but forces the value into an …","Like <code>u32_region_mask</code>, but forces the value into an …","Like <code>u8_region_mask</code>, but forces the value into an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","The upper byte","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The lower byte","","","","","","","","","","","","","","","","","","Gets the <code>B</code> bit.","Gets a <code>L</code> to <code>H</code> (inclusive) bit region of the value.","Like <code>u16_get_region</code> but the output is shifted down …","Generates a bit mask where all bits in the region are 1.","Replaces the <code>B</code> bit.","Replaces a <code>L</code> to <code>H</code> (inclusive) bit region of the value.","Like <code>u16_with_region</code> but the value is shifted up …","Gets the <code>B</code> bit.","Gets a <code>L</code> to <code>H</code> (inclusive) bit region of the value.","Like <code>u32_get_region</code> but the output is shifted down …","Generates a bit mask where all bits in the region are 1.","Replaces the <code>B</code> bit.","Replaces a <code>L</code> to <code>H</code> (inclusive) bit region of the value.","Like <code>u32_with_region</code> but the value is shifted up …","Gets the <code>B</code> bit.","Gets a <code>L</code> to <code>H</code> (inclusive) bit region of the value.","Like <code>u8_get_region</code> but the output is shifted down …","Generates a bit mask where all bits in the region are 1.","Replaces the <code>B</code> bit.","Replaces a <code>L</code> to <code>H</code> (inclusive) bit region of the value.","Like <code>u8_with_region</code> but the value is shifted up …","Two <code>u8</code> values packed as a <code>u16</code>.","Updates the upper byte value, returning the new <code>u8x2</code>","Updates the lower byte value, returning the new <code>u8x2</code>"],"i":[1,2,3,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,4,1,2,3,4,4,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[1,1],5],[[2,2],5],[[3,3],5],[[4,4],5],[[],1],[[],2],[[],3],[[],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[4,9],[[]],[[]],[[]],[[]],[4,9],[[4,4],6],[[1,1],[[10,[5]]]],[[2,2],[[10,[5]]]],[[3,3],[[10,[5]]]],[[4,4],[[10,[5]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[13,6],[13,13],[13,13],[[14,14],13],[[13,6],13],[[13,13],13],[[13,13],13],[14,6],[14,14],[14,14],[[14,14],14],[[14,6],14],[[14,14],14],[[14,14],14],[9,6],[9,9],[9,9],[[14,14],9],[[9,6],9],[[9,9],9],[[9,9],9],0,[[4,9],4],[[4,9],4]],"p":[[3,"U32ConstRegionMask"],[3,"U16ConstRegionMask"],[3,"U8ConstRegionMask"],[3,"u8x2"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"u16"],[15,"u32"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
