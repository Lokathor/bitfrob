var searchIndex = JSON.parse('{\
"bitfrob":{"doc":"A crate to help with bit manipulation of integers.","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11],"n":["U128BitIterLow","U16BitIterLow","U32BitIterLow","U64BitIterLow","U8BitIterLow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_count_and_bits","from_count_and_bits","from_count_and_bits","from_count_and_bits","from_count_and_bits","hash","high","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","low","ne","next","next","next","next","next","partial_cmp","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","u128_get_bit","u128_get_region","u128_get_value","u128_region_mask","u128_replicate_bits","u128_with_bit","u128_with_region","u128_with_value","u16_get_bit","u16_get_region","u16_get_value","u16_region_mask","u16_replicate_bits","u16_with_bit","u16_with_region","u16_with_value","u32_get_bit","u32_get_region","u32_get_value","u32_region_mask","u32_replicate_bits","u32_with_bit","u32_with_region","u32_with_value","u64_get_bit","u64_get_region","u64_get_value","u64_region_mask","u64_replicate_bits","u64_with_bit","u64_with_region","u64_with_value","u8_get_bit","u8_get_region","u8_get_value","u8_region_mask","u8_replicate_bits","u8_with_bit","u8_with_region","u8_with_value","u8x2","with_high","with_low"],"q":["bitfrob","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","","The upper byte","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The lower byte","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Two <code>u8</code> values packed as a <code>u16</code>.","Updates the upper byte value, returning the new <code>u8x2</code>","Updates the lower byte value, returning the new <code>u8x2</code>"],"i":[0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,1,2,3,4,5,6,1,2,3,4,5,6,2,3,4,5,6,1,1,1,2,3,4,5,6,2,3,4,5,6,1,1,2,3,4,5,6,1,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],7],[[],1],[[1,1],8],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[11,12],2],[[11,13],3],[[11,11],4],[[11,14],5],[[11,15],6],[1],[1,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,12],[[1,1],8],[2,[[16,[12]]]],[3,[[16,[13]]]],[4,[[16,[11]]]],[5,[[16,[14]]]],[6,[[16,[15]]]],[[1,1],[[16,[7]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[11,15],8],[[11,11,15],15],[[11,11,15],15],[[11,11],15],[[11,15],15],[[11,15,8],15],[[11,11,15,15],15],[[11,11,15,15],15],[[11,13],8],[[11,11,13],13],[[11,11,13],13],[[11,11],13],[[11,13],13],[[11,13,8],13],[[11,11,13,13],13],[[11,11,13,13],13],[[11,11],8],[[11,11,11],11],[[11,11,11],11],[[11,11],11],[[11,11],11],[[11,11,8],11],[[11,11,11,11],11],[[11,11,11,11],11],[[11,14],8],[[11,11,14],14],[[11,11,14],14],[[11,11],14],[[11,14],14],[[11,14,8],14],[[11,11,14,14],14],[[11,11,14,14],14],[[11,12],8],[[11,11,12],12],[[11,11,12],12],[[11,11],12],[[11,12],12],[[11,12,8],12],[[11,11,12,12],12],[[11,11,12,12],12],0,[[1,12],1],[[1,12],1]],"p":[[3,"u8x2"],[3,"U8BitIterLow"],[3,"U16BitIterLow"],[3,"U32BitIterLow"],[3,"U64BitIterLow"],[3,"U128BitIterLow"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u32"],[15,"u8"],[15,"u16"],[15,"u64"],[15,"u128"],[4,"Option"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
